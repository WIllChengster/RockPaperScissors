{"version":3,"sources":["components/RPS_button.js","helpers/winCheck.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["RPSButton","props","useState","emoji","updateEmoji","rps","useEffect","className","winCheck","playerRPS","compRPS","Results","comp_rps","RPSemoji","winEmoji","App","isInitialMount","useRef","update_rps","update_comp_rps","winCount","updateWinCount","showResults","updateShowResults","Math","floor","random","handleClick","e","input","target","attributes","getNamedItem","value","current","result","console","log","count","timer","setTimeout","clearTimeout","ResultsComponent","Result","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f5fccd5f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './RPS_button.css';\r\nconst RPSButton = (props) => {\r\n    const [ emoji, updateEmoji ] = useState(null)\r\n    const { rps } = props;\r\n\r\n    useEffect( () => {\r\n        switch(rps){\r\n            case 'rock':\r\n                return updateEmoji('üëä');\r\n            case 'scissors':\r\n                return updateEmoji('‚úå');\r\n            case 'paper':\r\n                return updateEmoji( '‚úã');\r\n            default:\r\n                return;\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return <div {...props} className=\"rpsButton\" >{emoji}</div>\r\n}\r\n\r\nexport default RPSButton","const winCheck = (playerRPS, compRPS) => {\r\n    if(playerRPS === 'rock'){\r\n        if(compRPS === 'rock'){\r\n            return 'tie'\r\n        }\r\n        if(compRPS === 'paper'){\r\n            return 'lose'\r\n        }\r\n        if(compRPS === 'scissors'){\r\n            return 'win'\r\n        }\r\n    }\r\n\r\n    if(playerRPS === 'paper'){\r\n        if(compRPS === 'rock'){\r\n            return 'win'\r\n        }\r\n        if(compRPS === 'paper'){\r\n            return 'tie'\r\n        }\r\n        if(compRPS === 'scissors'){\r\n            return 'lose'\r\n        }\r\n        \r\n    }if(playerRPS === 'scissors'){\r\n        if(compRPS === 'rock'){\r\n            return 'lose'\r\n        }\r\n        if(compRPS === 'paper'){\r\n            return 'win'\r\n        }\r\n        if(compRPS === 'scissors'){\r\n            return 'tie'\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default winCheck","import React from 'react';\r\nimport winCheck from '../helpers/winCheck';\r\nimport './Results.css';\r\n\r\nconst Results = (props) =>{\r\n\r\n    const { comp_rps, rps } = props\r\n\r\n    \r\n    const RPSemoji = (rps) => {\r\n        switch(rps){\r\n            case 'rock':\r\n                return 'üëä';\r\n            case 'scissors':\r\n                return '‚úå';\r\n            case 'paper':\r\n                return  '‚úã';\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    const winEmoji = () => {\r\n        const result = winCheck(rps, comp_rps);\r\n        switch(result){\r\n            case 'win':\r\n                return '‚úî You Win!';\r\n            case 'lose':\r\n                return '‚ùå You Lose!';\r\n            case 'tie':\r\n                return 'ü§∑ Its a tie!';\r\n            default:\r\n                return '';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"results-container\" >\r\n\r\n            <div className=\"rps computer-rps\" >\r\n                {RPSemoji(props.comp_rps)}\r\n            </div>\r\n            <div className=\"result-emoji\">\r\n                {winEmoji()}\r\n            </div>\r\n            <div className=\"rps player-rps\">\r\n                {RPSemoji(props.rps)}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Results;","import React, { useState, useEffect, useRef } from 'react';\r\nimport RPSButton from './components/RPS_button'\r\nimport winCheck from './helpers/winCheck';\r\nimport Results from './components/Result';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const isInitialMount = useRef(true);\r\n  const [rps, update_rps] = useState(null);\r\n  const [comp_rps, update_comp_rps] = useState(null);\r\n  const [winCount, updateWinCount] = useState(0);\r\n  const [showResults, updateShowResults] = useState(false);\r\n\r\n  useEffect( () => {\r\n    //computer chooses RPS during 1 of 2 events:\r\n    //1. component first mounts\r\n    //2. when showResults updates AND is false.\r\n    //      need to make sure showResults is false so that state doesn't change when we show the user what the computer chose.\r\n    if(!showResults){\r\n      const random_num = Math.floor(Math.random() * 3)\r\n      switch(random_num){\r\n        case 0: \r\n          update_comp_rps('rock');\r\n          break;\r\n        case 1:\r\n          update_comp_rps('paper');\r\n          break;\r\n        case 2:\r\n          update_comp_rps('scissors');\r\n          break;\r\n        default: break;\r\n      }\r\n      update_rps(null);\r\n\r\n    }\r\n\r\n  }, [showResults] )\r\n\r\n  const handleClick = (e) => {\r\n    const input = e.target.attributes.getNamedItem('rps').value\r\n    update_rps(input);\r\n    updateShowResults(true)\r\n  } \r\n\r\n  useEffect( () => {\r\n    //when rps changes, will see if player wins\r\n    if(isInitialMount.current){\r\n      isInitialMount.current = false;\r\n    } else {\r\n      const result = winCheck(rps, comp_rps);\r\n      console.log(rps, comp_rps)\r\n      if( result === 'win' ){\r\n        updateWinCount(count => count + 1)\r\n      }\r\n    }\r\n\r\n  }, [rps, comp_rps])\r\n\r\n  useEffect( () => {\r\n    const timer = setTimeout(() => {\r\n      updateShowResults(false)\r\n    }, 2900)\r\n    \r\n    return () => clearTimeout(timer)\r\n  }, [showResults])\r\n\r\n\r\n  const ResultsComponent = showResults ? <Results comp_rps={comp_rps} rps={rps}/> : null;\r\n\r\n  return (\r\n    <div className=\"container\" >\r\n      {ResultsComponent}\r\n      {/* <Results comp_rps={comp_rps} rps={rps}/> */}\r\n      <h1 className=\"wins\">Wins: {winCount}</h1>\r\n      <div className='buttons-container' >\r\n        <div>\r\n          <RPSButton onClick={handleClick} rps='rock' />\r\n        </div>\r\n        <div>\r\n          <RPSButton onClick={handleClick} rps='paper'/>\r\n          <RPSButton onClick={handleClick} rps='scissors'/>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}